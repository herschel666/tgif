AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for the Tgif bot

Globals:
  Function:
    Timeout: 5

Parameters:
  StageName:
    Type: String
  DomainName:
    Type: String
  Zone:
    Type: String
  CertificateArn:
    Type: String
  TelegramBotToken:
    Type: String
  TenorApiKey:
    Type: String
  GitSha:
    Type: String
    Default: dev
  AlarmRecipient:
    Type: String
  EkUserId:
    Type: String
  RetentionInDays:
    Type: Number
    Default: 7

Resources:
  GetIndexFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-index/
      Handler: app.getIndexHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          STAGE: !Ref StageName
      Events:
        GetIndex:
          Type: Api
          Properties:
            RestApiId: !Ref TgifApi
            Path: /
            Method: get

  GetSettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-settings/
      Handler: app.getSettingsHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          STAGE: !Ref StageName
          TABLE_NAME: !Ref TgifDDB
          GIT_SHA: !Ref GitSha
      Events:
        GetSettings:
          Type: Api
          Properties:
            RestApiId: !Ref TgifApi
            Path: /user/{userId}/settings/{sessionId}
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TgifDDB

  PostSettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: post-settings/
      Handler: app.postSettingsHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          STAGE: !Ref StageName
          TABLE_NAME: !Ref TgifDDB
          GIT_SHA: !Ref GitSha
      Events:
        PostSettings:
          Type: Api
          Properties:
            RestApiId: !Ref TgifApi
            Path: /user/{userId}/settings/{sessionId}
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TgifDDB

  TgifFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: tgif/
      Handler: app.tgifHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          STAGE: !Ref StageName
          TELEGRAM_BOT_TOKEN: !Ref TelegramBotToken
          TENOR_API_KEY: !Ref TenorApiKey
          GIT_SHA: !Ref GitSha
          EK_USER_ID: !Ref EkUserId
          TABLE_NAME: !Ref TgifDDB
          AWS_NODEJS_CONNECTION_REUSE_ENABLE: 1
      Events:
        Tgif:
          Type: Api
          Properties:
            RestApiId: !Ref TgifApi
            Path: /tgif
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TgifDDB

  TgifApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref StageName
      EndpointConfiguration: EDGE

  TgifDDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'tgif-ddb-${StageName}'
      AttributeDefinitions:
        - AttributeName: ItemType
          AttributeType: S
        - AttributeName: ItemId
          AttributeType: S
      KeySchema:
        - AttributeName: ItemType
          KeyType: HASH
        - AttributeName: ItemId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ExpiryDate
        Enabled: true

  GetIndexLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - GetIndexFunction
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetIndexFunction}'
      RetentionInDays: !Ref RetentionInDays

  GetSettingsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - TgifFunction
    Properties:
      LogGroupName: !Sub '/aws/lambda/${GetSettingsFunction}'
      RetentionInDays: !Ref RetentionInDays

  PostSettingsLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - TgifFunction
    Properties:
      LogGroupName: !Sub '/aws/lambda/${PostSettingsFunction}'
      RetentionInDays: !Ref RetentionInDays

  TgifLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - TgifFunction
    Properties:
      LogGroupName: !Sub '/aws/lambda/${TgifFunction}'
      RetentionInDays: !Ref RetentionInDays

  ErrorTopic:
    Type: AWS::SNS::Topic

  ErrorTopicEmailSubscriber:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref AlarmRecipient
      Protocol: email
      TopicArn: !Ref ErrorTopic

  GetSettingsErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'Error-${GetSettingsFunction}'
      AlarmDescription: 'Alarm when errors occur in GET /settings.'
      Namespace: 'AWS/Lambda'
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetSettingsFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      AlarmActions:
        - !Ref ErrorTopic

  PostSettingsErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'Error-${PostSettingsFunction}'
      AlarmDescription: 'Alarm when errors occur in POST /settings.'
      Namespace: 'AWS/Lambda'
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref PostSettingsFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      AlarmActions:
        - !Ref ErrorTopic

  TgifErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'Error-${TgifFunction}'
      AlarmDescription: 'Alarm when errors occur in POST /tgif.'
      Namespace: 'AWS/Lambda'
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref TgifFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      AlarmActions:
        - !Ref ErrorTopic

  CustomDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DomainName
      CertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - EDGE

  DomainRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName
      HostedZoneId: !Ref Zone
      Type: A
      AliasTarget:
        DNSName: !GetAtt CustomDomainName.DistributionDomainName
        # Standard Zone ID for Cloudfront distribution
        HostedZoneId: Z2FDTNDATAQYW2

  BasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: (none)
      DomainName: !Ref DomainName
      RestApiId: !Ref TgifApi
      Stage: !Ref StageName

Outputs:
  TgifApi:
    Description: 'API Gateway endpoint URL for Prod stage for Tgif function'
    Value: !Sub 'https://${TgifApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/tgif/'
  TgifFunction:
    Description: 'Tgif Lambda Function ARN'
    Value: !GetAtt TgifFunction.Arn
  TgifFunctionIamRole:
    Description: 'Implicit IAM Role created for Tgif function'
    Value: !GetAtt TgifFunctionRole.Arn
